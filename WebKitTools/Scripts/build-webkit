#!/usr/bin/perl -w

# Copyright (C) 2005, 2006 Apple Inc. All rights reserved.
# Copyright (C) 2009 Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
# 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Build script wrapper for the WebKit Open Source Project.

use strict;
use File::Basename;
use File::Spec;
use FindBin;
use Getopt::Long qw(:config pass_through);
use lib $FindBin::Bin;
use webkitdirs;
use POSIX;

sub formatBuildTime($);
sub writeCongrats();

my $originalWorkingDirectory = getcwd();
chdirWebKit();

my $showHelp = 0;
my $clean = 0;
my $minimal = 0;
my $makeArgs;
my $startTime = time();

my ($threeDCanvasSupport, $threeDRenderingSupport, $channelMessagingSupport, $databaseSupport, $datagridSupport, $datalistSupport,
    $domStorageSupport, $eventsourceSupport, $filtersSupport, $geolocationSupport, $iconDatabaseSupport,
    $javaScriptDebuggerSupport, $mathmlSupport, $offlineWebApplicationSupport, $sharedWorkersSupport,
    $svgSupport, $svgAnimationSupport, $svgAsImageSupport, $svgDOMObjCBindingsSupport, $svgFontsSupport,
    $svgForeignObjectSupport, $svgUseSupport, $videoSupport, $webSocketsSupport, $wmlSupport, $wcssSupport, $xhtmlmpSupport, $workersSupport,
    $xpathSupport, $xsltSupport, $coverageSupport, $notificationsSupport);

my @features = (
    { option => "3d-canvas", desc => "Toggle 3D canvas support",
      define => "ENABLE_3D_CANVAS", default => (isAppleMacWebKit() && !isTiger()), value => \$threeDCanvasSupport },

    { option => "3d-rendering", desc => "Toggle 3D rendering support",
      define => "ENABLE_3D_RENDERING", default => (isAppleMacWebKit() && !isTiger()), value => \$threeDRenderingSupport },

    { option => "channel-messaging", desc => "Toggle MessageChannel and MessagePort support",
      define => "ENABLE_CHANNEL_MESSAGING", default => 1, value => \$channelMessagingSupport },

    { option => "coverage", desc => "Toggle code coverage support",
      define => "", default => 0, value => \$coverageSupport },

    { option => "database", desc => "Toggle Database Support",
      define => "ENABLE_DATABASE", default => 1, value => \$databaseSupport },

    { option => "datagrid", desc => "Toggle Datagrid Support",
      define => "ENABLE_DATAGRID", default => 1, value => \$datagridSupport },
      
    { option => "datalist", desc => "Toggle HTML5 datalist support",
      define => "ENABLE_DATALIST", default => 1, value => \$datalistSupport },
          
    { option => "dom-storage", desc => "Toggle DOM Storage Support",
      define => "ENABLE_DOM_STORAGE", default => 1, value => \$domStorageSupport },

    { option => "eventsource", desc => "Toggle server-sent events support",
      define => "ENABLE_EVENTSOURCE", default => 1, value => \$eventsourceSupport },

    { option => "filters", desc => "Toggle Filters support",
      define => "ENABLE_FILTERS", default => (isAppleWebKit() || isGtk() || isQt()), value => \$filtersSupport },

    { option => "geolocation", desc => "Toggle Geolocation support",
      define => "ENABLE_GEOLOCATION", default => isGtk(), value => \$geolocationSupport },

    { option => "icon-database", desc => "Toggle Icon database support",
      define => "ENABLE_ICONDATABASE", default => 1, value => \$iconDatabaseSupport },

    { option => "javascript-debugger", desc => "Toggle JavaScript Debugger/Profiler support",
      define => "ENABLE_JAVASCRIPT_DEBUGGER", default => 1, value => \$javaScriptDebuggerSupport },

    { option => "mathml", desc => "Toggle MathML support",
      define => "ENABLE_MATHML", default => 0, value => \$mathmlSupport },

    { option => "notifications", desc => "Toggle Desktop Notifications Support",
      define => "ENABLE_NOTIFICATIONS", default => 0, value => \$notificationsSupport },

    { option => "offline-web-applications", desc => "Toggle Offline Web Application Support",
      define => "ENABLE_OFFLINE_WEB_APPLICATIONS", default => 1, value => \$offlineWebApplicationSupport },

    { option => "shared-workers", desc => "Toggle SharedWorkers support",
      define => "ENABLE_SHARED_WORKERS", default => (isAppleWebKit() || isGtk()), value => \$sharedWorkersSupport },

    { option => "svg", desc => "Toggle SVG support",
      define => "ENABLE_SVG", default => 1, value => \$svgSupport },

    { option => "svg-animation", desc => "Toggle SVG animation support (implies SVG support)",
      define => "ENABLE_SVG_ANIMATION", default => 1, value => \$svgAnimationSupport },

    { option => "svg-as-image", desc => "Toggle SVG as Image support (implies SVG support)",
      define => "ENABLE_SVG_AS_IMAGE", default => 1, value => \$svgAsImageSupport },

    { option => "svg-dom-objc-bindings", desc => "Toggle SVG DOM Objective-C bindings support (implies SVG support)",
      define => "ENABLE_SVG_DOM_OBJC_BINDINGS", default => isAppleMacWebKit(), value => \$svgDOMObjCBindingsSupport },

    { option => "svg-fonts", desc => "Toggle SVG fonts support (imples SVG support)",
      define => "ENABLE_SVG_FONTS", default => 1, value => \$svgFontsSupport },

    { option => "svg-foreign-object", desc => "Toggle SVG foreign object support (implies SVG support)",
      define => "ENABLE_SVG_FOREIGN_OBJECT", default => 1, value => \$svgForeignObjectSupport },

    { option => "svg-use", desc => "Toggle SVG use element support (implies SVG support)",
      define => "ENABLE_SVG_USE", default => 1, value => \$svgUseSupport },

    { option => "video", desc => "Toggle Video support",
      define => "ENABLE_VIDEO", default => (isAppleWebKit() || isGtk()), value => \$videoSupport },

    { option => "web-sockets", desc => "Toggle Web Sockets support",
      define => "ENABLE_WEB_SOCKETS", default => 1, value=> \$webSocketsSupport },

    { option => "wml", desc => "Toggle WML support",
      define => "ENABLE_WML", default => 0, value => \$wmlSupport },

    { option => "xhtmlmp", desc => "Toggle XHTML-MP support",
      define => "ENABLE_XHTMLMP", default => 0, value => \$xhtmlmpSupport },

    { option => "wcss", desc => "Toggle WCSS support",
      define => "ENABLE_WCSS", default => 0, value => \$wcssSupport },

    { option => "workers", desc => "Toggle Web Workers support",
      define => "ENABLE_WORKERS", default => (isAppleWebKit() || isGtk()), value => \$workersSupport },

    { option => "xpath", desc => "Toggle XPath support",
      define => "ENABLE_XPATH", default => 1, value => \$xpathSupport },

    { option => "xslt", desc => "Toggle XSLT support",
      define => "ENABLE_XSLT", default => 1, value => \$xsltSupport },
);

# Update defaults from Qt's project file
if (isQt()) {
    my %qtDefaults = qtFeatureDefaults();
    foreach (@features) {
        $_->{default} = $qtDefaults{$_->{define}} || 0;
    }
}

# Initialize values from defaults
foreach (@ARGV) {
    if ($_ eq '--minimal') {
        $minimal = 1;
        last;
    }
}

# Initialize values from defaults
foreach (@features) {
    ${$_->{value}} = ($_->{default} && !$minimal) || 0;
}

$svgSupport = $svgSupport || $svgAnimationSupport || $svgAsImageSupport
    || $svgDOMObjCBindingsSupport || $svgFontsSupport
    || $svgForeignObjectSupport || $svgUseSupport;


my $programName = basename($0);
my $usage = <<EOF;
Usage: $programName [options] [options to pass to build system]
  --help                            Show this help message
  --clean                           Cleanup the build directory
  --debug                           Compile in debug mode
  --cairo-win32                     Build using Cairo (rather than CoreGraphics) on Windows
  --chromium                        Build the Chromium port on Mac/Win/Linux
  --gtk                             Build the GTK+ port
  --qt                              Build the Qt port

  --makeargs=<arguments>            Optional Makefile flags

  --minimal                         No optional features, unless explicitly enabled.

EOF

my %options = (
    'help' => \$showHelp,
    'clean' => \$clean,
    'makeargs=s' => \$makeArgs,
    'minimal' => \$minimal,
);

# Build usage text and options list from features
foreach (@features) {
    my $opt = sprintf("%-35s", "  --[no-]$_->{option}");
    $usage .= "$opt $_->{desc} (default: $_->{default})\n";
    $options{"$_->{option}!"} = $_->{value};
}

GetOptions(%options);

if ($showHelp) {
   print STDERR $usage;
   exit 1;
}

checkRequiredSystemConfig();
setConfiguration();

my $productDir = productDir();

# Check that all the project directories are there.
my @projects = ("JavaScriptCore", "WebCore", "WebKit");
# Only Apple builds JavaScriptGlue, and only on the Mac
splice @projects, 1, 0, "JavaScriptGlue" if isAppleMacWebKit();

my @otherDirs = ("WebKitLibraries");
for my $dir (@projects, @otherDirs) {
    if (! -d $dir) {
        die "Error: No $dir directory found. Please do a fresh checkout.\n";
    }
}

my @options = ();

# enable autotool options accordingly
if (isGtk()) {
    foreach (@features) {
        push @options, autotoolsFlag(${$_->{value}}, $_->{option});
    }

    push @options, "--makeargs=" . $makeArgs if defined($makeArgs);
} elsif (isAppleMacWebKit()) {
    push @options, XcodeOptions();

    sub option($$)
    {
        my ($feature, $isEnabled) = @_;
        return $feature . "=" . ($isEnabled ? $feature : " ");
    }

    foreach (@features) {
        if ($_->{option} eq "coverage") {
            push @options, XcodeCoverageSupportOptions() if $coverageSupport;
        } else {
            push @options, option($_->{define}, ${$_->{value}});
        }
    }

    # Copy library and header from WebKitLibraries to a findable place in the product directory.

    my @librariesToCopy = (
        "libWebKitSystemInterfaceTiger.a",
        "libWebKitSystemInterfaceLeopard.a",
        "libWebKitSystemInterfaceSnowLeopard.a",
        "libWebCoreSQLite3.a",
    );
    foreach my $libName (@librariesToCopy) {
        my $srcLib = "WebKitLibraries/" . $libName;
        my $lib = "$productDir/" . $libName;
        if (!-e $lib || -M $lib > -M $srcLib) {
            print "Updating $lib\n";
            system "ditto", $srcLib, $lib;
            system "ranlib", $lib;
        }
    }

    # FIXME: This code should be abstracted to not be copy/paste.
    my $srcHeader = "WebKitLibraries/WebKitSystemInterface.h";
    my $header = "$productDir/usr/local/include/WebKitSystemInterface.h";
    if (!-e $header || -M $header > -M $srcHeader) {
        print "Updating $header\n";
        system "mkdir", "-p", "$productDir/usr/local/include";
        system "ditto", $srcHeader, $header;
    }

    my $srcHeaderDir = "WebKitLibraries/WebCoreSQLite3";
    my $headerDir = "$productDir/WebCoreSQLite3";
    if (!-e $headerDir || -M $headerDir > -M $srcHeaderDir) {
        print "Updating $headerDir\n";
        system "ditto", $srcHeaderDir, $headerDir;
    }
} elsif (isAppleWinWebKit()) {
    # Copy WebKitSupportLibrary to the correct location in WebKitLibraries so it can be found.
    # Will fail if WebKitSupportLibrary.zip is not in source root.
    (system("perl WebKitTools/Scripts/update-webkit-support-libs") == 0) or die;
} elsif (isQt()) {
    @options = @ARGV;
    push @options, "--makeargs=" . $makeArgs if defined($makeArgs);

    foreach (@features) {
        push @options, "DEFINES+=$_->{define}=${$_->{value}}" if ${$_->{value}} != $_->{default};
    }
}

# Force re-link of existing libraries if different than expected
removeLibraryDependingOnSVG("WebCore", $svgSupport);

if (isWx()) {
    downloadWafIfNeeded();
    push @projects, 'WebKitTools/DumpRenderTree';
    push @projects, 'WebKitTools/wx/browser';
    push @projects, 'WebKit/wx/bindings/python';
}

if (isChromium()) {
    # Chromium doesn't build by project directories.
    @projects = ();
    my $result = buildChromium($clean, @options);
    exit exitStatus($result) if exitStatus($result);
}

# Build, and abort if the build fails.
for my $dir (@projects) {
    chdir $dir or die;
    my $result = 0;

    # For Gtk and Qt the WebKit project builds all others
    if ((isGtk() || isQt()) && $dir ne "WebKit") {
        chdir ".." or die;
        next;
    }

    if (isGtk()) {
        $result = buildGtkProject($dir, $clean,  @options);
    } elsif (isQt()) {
        $result = buildQMakeQtProject($dir, $clean, @options);
    } elsif (isAppleMacWebKit()) {
        $result = buildXCodeProject($dir, $clean, @options, @ARGV);
    } elsif (isAppleWinWebKit()) {
        if ($dir eq "WebKit") {
            $result = buildVisualStudioProject("win/WebKit.vcproj/WebKit.sln", $clean);
        }
    } elsif (isWx()) {
        @options = ();
        if (defined($makeArgs)) {
            @options = split(/ /, $makeArgs);
        }
        if ($dir eq "WebKit" && isWx()) {
            chdir 'wx' or die;
        }
            
        $result = buildWafProject($dir, $clean, @options);
    }

    if (exitStatus($result)) {
        if (isAppleWinWebKit()) {
            print "\n\n===== BUILD FAILED ======\n\n";
            my $scriptDir = relativeScriptsDir();
            print "Please ensure you have run $scriptDir/update-webkit to install dependencies.\n\n";
            my $baseProductDir = baseProductDir();
            print "You can view build errors by checking the BuildLog.htm files located at:\n$baseProductDir/obj/<project>/<config>.\n";
        }
        exit exitStatus($result);
    }
    chdirWebKit();
}

# Don't report the "WebKit is now built" message after a clean operation.
exit if $clean;

# Write out congratulations message.
writeCongrats();

exit 0;

sub formatBuildTime($)
{
    my ($buildTime) = @_;

    my $buildHours = int($buildTime / 3600);
    my $buildMins = int(($buildTime - $buildHours * 3600) / 60);
    my $buildSecs = $buildTime - $buildHours * 3600 - $buildMins * 60;

    if ($buildHours) {
        return sprintf("%dh:%02dm:%02ds", $buildHours, $buildMins, $buildSecs);
    }
    return sprintf("%02dm:%02ds", $buildMins, $buildSecs);
}

sub writeCongrats()
{
    my $launcherPath = launcherPath();
    my $launcherName = launcherName();
    my $endTime = time();
    my $buildTime = formatBuildTime($endTime - $startTime);

    print "\n";
    print "===========================================================\n";
    print " WebKit is now built ($buildTime). \n";
    if (!isChromium()) {
        print " To run $launcherName with this newly-built code, use the\n";
        print " \"$launcherPath\" script.\n";
    }
    print "===========================================================\n";
}
